{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","isValid","obj","Object","values","every","value","NewMovie","state","error","titleError","imgUrlError","imdbUrlError","imdbIdError","validation","titleValid","imgUrlValid","imdbUrlValid","imdbIdValid","handleChange","target","name","setState","prevState","trim","onBlur","nameError","nameValidation","patternString","patternUrl","test","Boolean","handleSubmit","event","preventDefault","addMovie","props","newMovie","this","valid","onSubmit","cx","htmlFor","type","placeholder","onChange","rows","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05c4261b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport './NewMovie.scss';\n\nfunction isValid(obj) {\n  return Object.values(obj).every(value => value);\n}\n\nexport class NewMovie extends Component {\n  state = {\n    movie: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n    error: {\n      titleError: false,\n      imgUrlError: false,\n      imdbUrlError: false,\n      imdbIdError: false,\n    },\n    validation: {\n      titleValid: false,\n      imgUrlValid: false,\n      imdbUrlValid: false,\n      imdbIdValid: false,\n    },\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState(prevState => ({\n      movie: {\n        ...prevState.movie,\n        [name]: value.trim(),\n      },\n    }));\n  };\n\n  onBlur = ({ target }) => {\n    const { name, value } = target;\n    const nameError = `${name}Error`;\n    const nameValidation = `${name}Valid`;\n    const patternString = /[^\\s\\w\\d]/g;\n    // eslint-disable-next-line max-len\n    const patternUrl = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/g;\n\n    this.setState((prevState) => {\n      if (name === 'title' || name === 'imdbId') {\n        return {\n          error: {\n            ...prevState.error,\n            [nameError]: !patternString.test(value),\n          },\n          validation: {\n            ...prevState.validation,\n            [nameValidation]: true,\n          },\n        };\n      }\n\n      return {\n        error: {\n          ...prevState.error,\n          [nameError]: Boolean(patternUrl.test(value)),\n        },\n        validation: {\n          ...prevState.validation,\n          [nameValidation]: true,\n        },\n      };\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { addMovie } = this.props;\n    const newMovie = { ...this.state.movie };\n    const error = { ...this.state.error };\n    const validation = { ...this.state.validation };\n\n    if (isValid(error) && isValid(validation)) {\n      addMovie(newMovie);\n\n      this.setState({\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      });\n    }\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n    const valid = this.state.validation;\n    const error = { ...this.state.error };\n\n    return (\n      <form\n        className=\"form\"\n        name=\"newMovie\"\n        onSubmit={this.handleSubmit}\n      >\n        <label\n          className={cx('form_label label', {\n            'form__label-titleError': valid.titleValid && !error.titleError,\n          })}\n          htmlFor=\"title\"\n        >\n          Add title\n        </label>\n        <input\n          className={cx('form__input', {\n            'form__input-valid': valid.titleValid && error.titleError,\n            'form__input-notValid': valid.titleValid && !error.titleError,\n          })}\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"type title\"\n          value={title}\n          onChange={this.handleChange}\n          onBlur={this.onBlur}\n        />\n        <label\n          className=\"form__label label\"\n          htmlFor=\"description\"\n        >\n          Add Description\n        </label>\n        <textarea\n          className=\"form__textarea textarea\"\n          name=\"description\"\n          placeholder=\"type description\"\n          value={description}\n          onChange={this.handleChange}\n          rows=\"7\"\n        />\n        <label\n          className={cx('form_label label', {\n            'form__label-imgUrlError': valid.imgUrlValid && !error.imgUrlError,\n          })}\n          htmlFor=\"imgUrl\"\n        >\n          Add img url\n        </label>\n        <input\n          className={cx('form__input', {\n            'form__input-valid': valid.imgUrlValid && error.imgUrlError,\n            'form__input-notValid': valid.imgUrlValid && !error.imgUrlError,\n          })}\n          type=\"text\"\n          name=\"imgUrl\"\n          placeholder=\"type img address\"\n          value={imgUrl}\n          onChange={this.handleChange}\n          onBlur={this.onBlur}\n        />\n        <label\n          className={cx('form_label label', {\n            'form__label-ImdbUrlError':\n              valid.imdbUrlValid && !error.imdbUrlError,\n          })}\n          htmlFor=\"imdbUrl\"\n        >\n          Add IMDB url\n        </label>\n        <input\n          className={cx('form__input', {\n            'form__input-valid': valid.imdbUrlValid && error.imdbUrlError,\n            'form__input-notValid': valid.imdbUrlValid && !error.imdbUrlError,\n          })}\n          type=\"text\"\n          name=\"imdbUrl\"\n          placeholder=\"type IMDB url\"\n          value={imdbUrl}\n          onChange={this.handleChange}\n          onBlur={this.onBlur}\n        />\n        <label\n          className={cx('form_label label', {\n            'form__label-ImdbIdError': valid.imdbIdValid && !error.imdbIdError,\n          })}\n          htmlFor=\"imdbId\"\n        >\n          Add IMDB id\n        </label>\n        <input\n          className={cx('form__input', {\n            'form__input-valid': valid.imdbIdValid && error.imdbIdError,\n            'form__input-notValid': valid.imdbIdValid && !error.imdbIdError,\n          })}\n          type=\"text\"\n          name=\"imdbId\"\n          placeholder=\"type IMDB id\"\n          value={imdbId}\n          onChange={this.handleChange}\n          onBlur={this.onBlur}\n        />\n        <button\n          className=\"form_buttom button\"\n          type=\"submit\"\n        >\n          Add Movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}